from mars.utils.func import LoadYAML2Dict
from mars.rollout import rollout
from mars.rl.agents import *
from mars.rl.agents.multiagent import MultiAgent
from mars.env.import_env import make_env
from mars.utils.func import get_model_path, get_exploiter
from mars.utils.common import MetaStrategyMethods

import argparse

## this one for nash only
### Load configurations

def launch_rollout(method, load_id, epi):

    prefix = 'mars/confs/mdp/mdp_arbitrary_mdp_'
    yaml_file = prefix + method

    args = LoadYAML2Dict(yaml_file, toAttr=True)
    args.marl_spec['global_state'] = True
    args.max_episodes = 30000
    args.against_baseline = False
    args.num_envs = 1  # can also to multiprocess exploitation for speed up
    args.test = False
    args.exploit = True
    args.device = 'gpu'

    if method in MetaStrategyMethods:
        folder = f'data/model/{load_id}/mdp_arbitrary_mdp_{method}/'
        args.load_model_full_path = get_model_path(args.marl_method, folder)

    else:
        # only for these environments: 'selfplay2', 'nash_dqn', 'nash_dqn_exploiter', 'nfsp'
        folder = f'data/model/{load_id}/mdp_arbitrary_mdp_{method}/{epi}_0'
        args.load_model_full_path = folder

    ### Create env
    env = make_env(args)
    print(env)

    ### Specify models for each agent
    trained_model = eval(args.algorithm)(env, args)
    exploiter, exploitation_args = get_exploiter('DQN', env, args)

    model = MultiAgent(env, [trained_model, exploiter], exploitation_args)

    ### Rollout
    if method in MetaStrategyMethods:
        rollout(env, model, args, load_id+'_exploit')
    else:
        rollout(env, model, args, load_id+f'_exploit_{epi}')

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Nash DQN with exploiter training.')
    parser.add_argument('--method', type=str, default=None, help='method name')
    parser.add_argument('--load_id', type=str, default=None, help='identification number for each run')
    parser.add_argument('--epi', type=str, default=None, help='identification number for each run')
    parser_args = parser.parse_args()
    launch_rollout(parser_args.method, parser_args.load_id, parser_args.epi)