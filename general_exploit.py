from mars.utils.common import SelfplayBasedMethods
from mars.env.import_env import make_env
from mars.rollout import rollout
from mars.rl.agents  import *
from mars.rl.agents.multiagent import MultiAgent
from mars.utils.func import get_general_args, get_model_path, get_exploiter
import argparse
import os
parser = argparse.ArgumentParser(description='Arguments of the general launching script for MARS.')


def launch_rollout(env, method, load_id, save_id, to_exploit):
    args = get_general_args(env, method)

    # exploitation setting
    args.num_envs = 1
    args.max_episodes = 50000  # exploitation episodes
    args.against_baseline = False
    args.test = False
    # args.render = True
    args.exploit = True

    folder = f'./data/model/{load_id}/{env}_{method}/'
    args.load_model_full_path = get_model_path(method, folder)

    ### Create env
    env = make_env(args)
    print(env)

    ### Specify models for each agent     
    trained_model = eval(args.algorithm)(env, args)
    
    ### Load exploiter with specified args (just change the previous args)
    exploiter, exploitation_args = get_exploiter('DQN', env, args)

    ### Construct multi-agent model
    if to_exploit == 'first':
        exploitation_args['idx_exploited_model'] = 0  # exploit the first player side
        model = MultiAgent(env, [trained_model, exploiter], exploitation_args)

    else: # 'second'
        exploitation_args['idx_exploited_model'] = 1  # exploit the second player side
        model = MultiAgent(env, [exploiter, trained_model], exploitation_args)

    ### Rollout
    rollout(env, model, exploitation_args, save_id = load_id+f'_exploit_{to_exploit}(50000)') # save results of exploitation in a separate folder

if __name__ == '__main__':
    parser.add_argument('--env', type=str, default=None, help='environment')
    parser.add_argument('--method', type=str, default=None, help='method name')
    parser.add_argument('--load_id', type=str, default=None, help='identification number for loading models')
    parser.add_argument('--save_id', type=str, default=None, help='identification number for saving models')
    parser.add_argument('--to_exploit', type=str, default=None, help='the model to exploit: first or second')
    parser_args = parser.parse_args()
    launch_rollout(parser_args.env, parser_args.method, parser_args.load_id, parser_args.save_id, parser_args.to_exploit)