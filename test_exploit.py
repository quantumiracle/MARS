from mars.env.import_env import make_env
from mars.rollout import rollout
from mars.rl.agents import *
from mars.rl.agents.multiagent import MultiAgent
from mars.utils.func import get_model_path, get_exploiter
from mars.utils.args_parser import get_default_args

### Load configurations
game_type = ['pettingzoo', 'slimevolley'][0]
game = ['boxing_v2', 'surround_v2', 'combat_jet_v1', 'pong_v3', 'tennis_v3', \
    'combat_tank_v2', 'ice_hockey_v2', 'double_dunk_v3', 'SlimeVolley-v0'][3]
method = ['selfplay', 'fictitious_selfplay', 'nash_dqn', 'nash_dqn_exploiter', 'nash_dqn_factorized', 'nash_ppo', 'psro', 'nfsp'][2]

args = get_default_args(game_type+'_'+game, method)
args.multiprocess = False
print(args)

### Change/specify some arguments if necessary
args.against_baseline = False
args.num_envs = 1  # can also to multiprocess exploitation for speed up
args.test = False
args.exploit = True
args.render = True
args.device = 'gpu'
load_id = '202210101938'
folder = f'data/model/{load_id}/{game_type}_{game}_{method}/'
to_exploit = ['first', 'second'][0]

args.load_model_full_path = get_model_path(method, folder)

### Create env
env = make_env(args)
print(env)

### Specify models for each agent
trained_model = eval(args.algorithm)(env, args)

### Load exploiter with specified args (just change the previous args)
exploiter, exploitation_args = get_exploiter('DQN', env, args)
# path = f'data/model/{load_id}_exploit_second_2/{game_type}_{game}_{method}/2000_0'  # this is for test after exploitation
# print(f'load exploiter model from: {path}')
# exploiter.load_model(path)

# trained_model.fix()
# exploiter.fix()

### Construct multi-agent model
if 'first' in to_exploit:
    exploitation_args['idx_exploited_model'] = 0  # exploit the first player side
    model = MultiAgent(env, [trained_model, exploiter], exploitation_args)

else: # 'second'
    exploitation_args['idx_exploited_model'] = 1  # exploit the second player side
    model = MultiAgent(env, [exploiter, trained_model], exploitation_args)

### Rollout
rollout(env, model, exploitation_args, save_id = load_id+'_exploit_test')
