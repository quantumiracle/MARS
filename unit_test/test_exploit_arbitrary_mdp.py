from mars.utils.func import LoadYAML2Dict
from mars.rollout import rollout
from mars.rl.agents import *
from mars.rl.agents.multiagent import MultiAgent
from mars.env.import_env import make_env
from mars.utils.func import get_model_path, get_exploiter

import argparse
parser = argparse.ArgumentParser(
    description='Nash DQN with exploiter training.')
parser.add_argument('--test', dest='test', action='store_true', default=False)
parser.add_argument('--model', type=str, default=None,
                    help='model index')
parser_args = parser.parse_args()

### Load configurations
# only for these environments
method = ['fictitious_selfplay2', 'nxdo2'][1]
prefix = 'mars/confs/mdp/mdp_arbitrary_mdp_'
yaml_file = prefix + method

args = LoadYAML2Dict(yaml_file, toAttr=True)
args.marl_spec['global_state'] = True
args.max_episodes = 30000
args.against_baseline = False
args.num_envs = 1  # can also to multiprocess exploitation for speed up
args.test = False
args.exploit = True
load_id = '20220119151048'

folder = f'data/model/{load_id}/mdp_arbitrary_mdp_{method}/'

args.load_model_full_path = get_model_path(args.marl_method, folder)

### Create env
env = make_env(args)
print(env)

### Specify models for each agent
trained_model = eval(args.algorithm)(env, args)
exploiter, exploitation_args = get_exploiter('DQN', env, args)

model = MultiAgent(env, [trained_model, exploiter], exploitation_args)

### Rollout
from datetime import datetime
now = datetime.now()
rollout(env, model, args, load_id+'_exploit')
