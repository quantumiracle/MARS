diff --git a/mars/confs/default.yaml b/mars/confs/default.yaml
index cb9b2fb5..6f513f87 100644
--- a/mars/confs/default.yaml
+++ b/mars/confs/default.yaml
@@ -42,6 +42,11 @@ train_args:
     eval_models: False   # evalutation models during training (only for specific methods)
     save_path: ''       # path to save models and logs
     save_interval: 2000 # episode interval to save models
+    wandb_activate: False # wandb for logging
+    wandb_entity: ''
+    wandb_project: ''
+    wandb_group: ''
+    wandb_name: ''
     net_architecture: 
         hidden_dim_list: [128, 128, 128] 
         hidden_activation: ReLU  # use torch.nn (in Sequential) style rather than torch.nn.functional (in forward)
diff --git a/mars/utils/args_parser.py b/mars/utils/args_parser.py
index 94c55f09..c7b77c8b 100644
--- a/mars/utils/args_parser.py
+++ b/mars/utils/args_parser.py
@@ -1,6 +1,7 @@
 import argparse
 import sys
 from mars.utils.func import LoadYAML2Dict
+from mars.utils.wandb import init_wandb
 
 def get_parser_args():
     ''' deprecated '''
@@ -107,6 +108,11 @@ def get_args():
     * '--eval_models', type=bool, default=False, help='evalutation models during training (only for specific methods)'
     * '--save_path', type=str, default='/', help='path to save models and logs'
     * '--save_interval', type=int, default=2000, help='episode interval to save models'
+    * '--wandb_activate', type=bool, default=False, help='activate wandb for logging'
+    * '--wandb_entity', type=str, default='', help='wandb entity'
+    * '--wandb_project', type=str, default='', help='wandb project'
+    * '--wandb_group', type=str, default='', help='wandb project'
+    * '--wandb_name', type=str, default='', help='wandb name'
     * '--net_architecture.hidden_dim_list', type=str, default='[128, 128, 128]', help='list of hidden dimensions for model'
     * '--net_architecture.hidden_activation', type=str, default='ReLU', help='hidden activation function'
     * '--net_architecture.output_activation', type=str, default=False, help='output activation function'
@@ -133,7 +139,7 @@ def get_args():
 
     # get default args
     default_args = get_default_args(arg_env, arg_method)
-    # print('default: ', default_args)
+    print('default: ', default_args)
 
     # overwrite default with user input args
     for i, arg in enumerate(sys.argv[1:]):
@@ -147,7 +153,21 @@ def get_args():
                 ind = default_args
                 for p in mapping_path[:-1]:
                     ind = ind[p]
-                ind[mapping_path[-1]] = eval(arg)
-
-    # print(default_args)  # args after overwriting
+                try:
+                    ind[mapping_path[-1]] = eval(arg)
+                except:
+                    ind[mapping_path[-1]] = arg
+
+    print(default_args)  # args after overwriting
+
+    # initialize wandb if necessary
+    if default_args.wandb_activate:
+        if len(default_args.wandb_project) == 0:
+            default_args.wandb_project = '_'.join((default_args.env_type, default_args.env_name, default_args.marl_method))
+        if len(default_args.wandb_group) == 0:
+            default_args.wandb_group = ''
+        if len(default_args.wandb_name) == 0:
+            default_args.wandb_name = str(default_args.save_id)
+        init_wandb(default_args)
+        
     return default_args
diff --git a/mars/utils/test.py b/mars/utils/test.py
deleted file mode 100644
index 33b38276..00000000
--- a/mars/utils/test.py
+++ /dev/null
@@ -1,99 +0,0 @@
-import yaml
-import collections.abc
-import copy
-from data_struct import AttrDict
-
-def LoadYAML2Dict(yaml_file: str,
-                  toAttr: bool = False,
-                  mergeWith: str = 'confs/default.yaml',
-                  confs = {}):
-    """ A function loading the hyper-parameters in yaml file into a dictionary.
-
-    :param yaml_file: the yaml file name
-    :type yaml_file: str
-    :param toAttr: if True, transform the configuration dictionary into a class,
-        such that each hyperparameter can be called with class.attribute instead of dict['attribute']; defaults to False
-    :type toAttr: bool, optional
-    :param mergeWith: if not None, merge the loaded yaml (with overwritting priority) with the yaml given by this path;
-    for example, merging with default yaml file will fill those missing entries with those in defaulf configurations.
-    :type mergeDefault: string or None, optional
-    :param confs: input a dictionary of configurations from outside the function, defaults to {}
-    :type confs: dict, optional
-    :return: a dictionary of configurations, including all hyper-parameters for environment, algorithm and training/testing.
-    :rtype: dict
-    """
-    if mergeWith is not None:
-        with open(mergeWith) as f:
-            default = yaml.safe_load(f)
-        confs = UpdateDictAwithB(confs, default, withOverwrite=False)
-
-    with open(yaml_file + '.yaml') as f:
-        # use safe_load instead load
-        loaded = yaml.safe_load(f)
-    confs = UpdateDictAwithB(confs, loaded, withOverwrite=True)
-
-    if toAttr:
-        concat_dict = {
-        }  # concatenate all types of arguments into one dictionary
-        for k, v in confs.items():
-            concat_dict.update(v)
-        return AttrDict(concat_dict)
-    else:
-        return confs
-
-
-def UpdateDictAwithB(
-    A,
-    B,
-    withOverwrite: bool = True,
-) -> None:
-    """ Update the entries in dictionary A with dictionary B.
-
-    :param A: a dictionary
-    :type A: dict
-    :param B: a dictionary
-    :type B: dict
-    :param withOverwrite: whether replace the same entries in A with B, defaults to False
-    :type withOverwrite: bool, optional
-    :return: none
-    """
-    A_ = copy.deepcopy(A)
-    B_ = copy.deepcopy(B)
-    if withOverwrite:
-        InDepthUpdateDictAwithB(A_, B_)
-    else:
-        temp = copy.deepcopy(A_)
-        InDepthUpdateDictAwithB(A_, B_)
-        InDepthUpdateDictAwithB(A_, temp)
-
-    return A_
-
-
-def InDepthUpdateDictAwithB(
-    A,
-    B,
-) -> None:
-    """A function for update nested dictionaries A with B.
-
-    :param A: a nested dictionary, e.g., dict, dict of dict, dict of dict of dict ...
-    :type A: dict
-    :param B: a nested dictionary, e.g., dict, dict of dict, dict of dict of dict ...
-    :type B: dict
-    :return: none
-    """
-    for k, v in B.items():
-        if isinstance(v, collections.abc.Mapping):
-            A[k] = InDepthUpdateDictAwithB(A.get(k, {}), v)
-        else:
-            A[k] = v
-    return A
-
-
-if __name__ == '__main__':
-    a={'m': 1, 'n': 0}
-    b={'n': 2}
-    c=UpdateDictAwithB(a,b, withOverwrite=True)
-    print(a, c)
-
-    d=toAttrDict(c)
-    print(d)
diff --git a/mars/utils/test1.py b/mars/utils/test1.py
deleted file mode 100644
index 40f287d7..00000000
--- a/mars/utils/test1.py
+++ /dev/null
@@ -1,18 +0,0 @@
-import sys
-
-yaml_config = {'a': {'a1': 1, 'a2': 2}, 'b': {'b1': [1, 2, 3]}, 'c': 1}
-
-
-config = {}
-mapping_path = []
-print(sys.argv)
-for arg in sys.argv[1:]:
-    if arg.startswith('--'):
-        mapping_path = arg[2:].split('.')
-    else:
-        ind = yaml_config
-        for p in mapping_path[:-1]:
-            ind = ind[p]
-        ind[mapping_path[-1]] = eval(arg)
-
-print(yaml_config)
\ No newline at end of file
