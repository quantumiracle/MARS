from mars.utils.func import LoadYAML2Dict, UpdateDictAwithB
from mars.utils.data_struct import AttrDict
from mars.env.import_env import make_env
from mars.rollout import rollout
from mars.rl.agents import *
from mars.rl.agents.multiagent import MultiAgent
from mars.utils.func import get_general_args, get_model_path, get_exploiter

### Load configurations
game_type = 'pettingzoo'
game = ['boxing_v1', 'surround_v1', 'combat_plane_v1', 'pong_v2', 'tennis_v2', 'combat_tank_v1', 'ice_hockey_v1'][0]
method = ['selfplay', 'fictitious_selfplay', 'nash_dqn', 'nash_dqn_exploiter', 'nash_ppo', 'psro'][-1]

args = get_general_args(game_type+'_'+game, method)
print(args)

## Change/specify some arguments if necessary
args.against_baseline = False
args.num_envs = 1
args.test = False
args.exploit = True
args.render = True
load_id =  '0'
folder = f'./data/model/{load_id}/{game_type}_{game}_{method}/'

args.load_model_full_path = get_model_path(method, folder)

### Create env
env = make_env(args)
print(env)

### Specify models for each agent
trained_model = eval(args.algorithm)(env, args)

### Load exploiter with specified args (just change the previous args)
exploiter, exploitation_args = get_exploiter('PPO', env, args)

### Construct multi-agent model
model = MultiAgent(env, [trained_model, exploiter], exploitation_args)

### Rollout
rollout(env, model, exploitation_args, save_id = load_id+'_exploit')