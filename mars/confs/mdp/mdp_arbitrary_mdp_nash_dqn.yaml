env_args:
    env_name: arbitrary_mdp
    env_type: mdp
    num_envs: 1
    ram: True
    seed: random

agent_args:
    algorithm: NashDQN
    algorithm_spec:
        replay_buffer_size: 1e5  
        gamma: 1.
        multi_step: 5
        dueling: False
        target_update_interval: 1000 # updates skipped to update the target
        eps_start: 1.0
        eps_final: 0.0
        eps_decay: 10000  # tune according to env
        exploiter_update_itr: 1  # iterative update of the exploiter


train_args:
    batch_size: 640
    max_episodes: 300000
    max_steps_per_episode: 10000
    optimizer: adam
    learning_rate: 1e-4  
    device: gpu
    update_itr: 1  # iterations of updates per frame, 0~inf; <1 means several steps are skipped per update
    log_avg_window: 10 # average window length in logging
    log_interval: 10  # log print interval 
    save_interval: 1000 # episode interval to save models
    # render: True
    # test: True
    # load_model_idx: 0/1
    net_architecture: 
        hidden_dim_list: [128, 128, 128] 
        # hidden_dim_list: [32, 32, 32] 
        hidden_activation: ReLU  # use torch.nn (in Sequential) style rather than torch.nn.functional (in forward)
        output_activation: False # False means nan


    marl_method: nash_dqn
    marl_spec:  # configurations for specific MARL method
            {}
